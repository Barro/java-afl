# Copyright 2018  Jussi Judin
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

config_setting(
    name = "linux-mode",
    values = { "cpu": "k8" }
)

config_setting(
    name = "darwin-mode",
    values = { "cpu": "darwin" }
)

java_library(
    name = "JavaAflRaw",
    srcs = ["javafl/JavaAfl.java"],
)

genrule(
    name = "javafl-javah",
    srcs = ["javafl/JavaAfl.java"],
    outs = ["javafl/javafl_JavaAfl.h"],
    cmd = """\
javah -d $(@D) -jni javafl.JavaAfl
""",
)

genrule(
    name = "javafl-map-size",
    outs = ["javafl/afl-map-size.h"],
    cmd = select({
        ":linux-mode": """\
if command -v afl-showmap > /dev/null; then
    afl-showmap -b -o binary.map -- true 2>/dev/null || :
    stat --format "#define MAP_SIZE %s" binary.map > $@
else
    echo > $@
fi
""",
        ":darwin-mode": """\
if command -v afl-showmap > /dev/null; then
    afl-showmap -b -o binary.map -- true 2>/dev/null || :
    stat -f "#define MAP_SIZE %z" binary.map > $@
else
    echo > $@
fi
""",
    })
)

cc_library(
    name = "java-afl-lib",
    srcs = [
        "@local_jdk//:jni_header",
        "JavaAfl.c",
    ] + select({
        ":linux-mode": ["@local_jdk//:jni_md_header-linux"],
        ":darwin-mode": ["@local_jdk//:jni_md_header-darwin"],
    }),
    hdrs = [
        ":javafl-javah",
        ":javafl-map-size",
    ],
    includes = [
        "external/local_jdk/include",
        "javafl",
    ] + select({
        ":linux-mode": ["external/local_jdk/include/linux"],
        ":darwin-mode": ["external/local_jdk/include/darwin"],
    }),
    defines = ["HAVE_AFL_MAP_SIZE_H"],
)

cc_binary(
    name = "libjava-afl.so",
    deps = [ ":java-afl-lib"],
    linkshared = 1,
)

java_library(
    name = "JavaAflInject",
    srcs = ["javafl/JavaAflInject.java"],
    deps = ["@asm//jar"],
)

genrule(
    name = "JavaAfl-injected",
    srcs = [
        ":JavaAflRaw",
        ":JavaAflInject",
        ":libjava-afl.so",
        "@asm//jar",
    ],
    outs = ["javafl/JavaAfl.class"],
    cmd = """\
jar xf $(location JavaAflRaw);
java -cp $(location :JavaAflInject):$(location @asm//jar) \
    javafl.JavaAflInject javafl/JavaAfl.class $(location :libjava-afl.so);
cp javafl/JavaAfl.class $@
""",
)

java_binary(
    name = "java-afl-instrument",
    srcs = [
        "javafl/fuzz.java",
        "javafl/JavaAflInstrument.java",
        ],
    deps = [
        ":JavaAflRaw",
        "@asm//jar",
    ],
    resources = [
        ":JavaAfl-injected",
    ],
    main_class = "javafl.JavaAflInstrument",
    visibility = ["//visibility:public"],
)

java_binary(
    name = "java-afl-run",
    srcs = [
        "javafl/run.java",
        ],
    deps = [
        ":JavaAflRaw",
        ":java-afl-instrument",
        "@asm//jar",
    ],
    resources = [
        ":JavaAfl-injected",
    ],
    main_class = "javafl.run",
    visibility = ["//visibility:public"],
)
